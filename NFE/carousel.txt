#program carousel  10 ; This file - ssplay.bas - is part of Next Fractal Explorer  20 ; Next Fractal Explorer is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  30 ;  40 ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.  50 ;  60 ; You should have received a copy of the GNU General Public License along with this program. If not, see https://www.gnu.org/licenses/  70 ; link to emook pt3player  80 ; z80 code to delay to a number of seconds specified  by (65000) whilst still  90 ; servicing interrupts. From basic e.g POKE 65000,5: b=usr(65001) 100 ; required so that music does not stutter 110 .asm 120 ; org 65000 130 ;DELAY equ 65000 140 ; db 50  150 ;START 160 ; push af 170 ; push bc 180 ; ld a,(DELAY)  190 ; ld b,a 200 ;LOOP 210 ; ld c,50 220 ;LOOP1 230 ; halt 240 ; dec c 250 ; jr nz, LOOP1 260 ; djnz LOOP 270 ; pop bc 280 ; pop af 290 ; ret 300 ; 310 LAYER 1,1: LAYER OVER 5 320 RANDOMIZE : RUN AT 3 330 ; BANK NEW binbnk: BANK NEW tunebnk: PROC testmusic(): STOP  340 numitems=0: : rndplot=0: rndpal=0: 350 maxitems=20 : ;max number of plots/palettes that can be in a slideshow 360 minshow=0: maxshow=0 370 tuneints=0: tuneint=0 380 DIM plot$(maxitems,50): DIM pal$(maxitems,50): DIM tune$(maxitems,50) 385 .browse -t "ssh" -f -p "Select slideshow" ssfn$ 390 PROC loadssh(ssfn$)  400 ; temp setup of tunes until the creator can do it 410 ;numtunes=9:tuneint=5: ; no. of plots shown b4 switching tune 420 tune=1: ;current tune no. playing 430 ;DIM tune$(5,30): tune$(1)="she_stole_my_cat.pt3": tune$(2)="tune.pt3" 440 ;tune$(3)="everthing_is_fine.pt3": tune$(4)="shadows_of_the_moon_main_theme.pt3" 450 ;tune$(5)="unspoken_wishes.pt3" 460 BANK NEW uibnk: BANK NEW iobnk: BANK NEW l2palbnk: BANK NEW binbnk: BANK NEW tunebnk 470 LOAD "uibanked.bas" BANK uibnk : LOAD "iobanked.bas" BANK iobnk 480 BANK uibnk PROC LoadL2Pal (l2palbnk,"palettes/default256.pal") 490 LAYER OVER 5: LAYER 1,1: INK 7 500 ; dim a 2 dimensional array to hold the bank numbers allocated for each pre cached plots 510 DIM pcp(numitems,5) 520 FOR i=1 TO numitems: PROC stripspaces(plot$(i)) TO ssp$: PROC precache(ssp$,i) 530 NEXT i 540 LAYER 1,1: LAYER OVER 5: INK 7: PRINT "array contents ..." 550 PROC stripspaces(tune$(1)) TO ts$: PROC setuppt3(ts$)  560 ; start playing music before main loop 570 @displayloop 580 FOR i=1 TO numitems 590 PROC displayplot(i) 600 ri=1+ INT ( RND * (numitems-1)): CD "palettes": PROC StripSpaces(pal$(ri)) TO a$: BANK uibnk  PROC LoadL2Pal(l2palbnk,a$): CD ".." : REM random palette 610 IF minshow=maxshow: 620  delay= minshow : ;fixed delay 630 ELSE  640  delay= minshow+ INT ( RND *(maxshow-minshow)) 650 ENDIF  660 PROC wait(delay): 670 tuneint+=1 680 IF tuneint=tuneints : 690  tune+=1: IF tune>numtunes THEN tune=1 700  tuneint=0 710 PROC removept3(): PROC stripspaces(tune$(tune)) TO ts$: PROC setuppt3(ts$)  720 ENDIF  730 NEXT i 740 p$= INKEY$  750 IF p$<>"Q" AND p$<>"q" THEN GO TO @displayloop 760 LAYER 1,1: LAYER CLEAR : LAYER OVER 5 770 PROC releasebanks() 780 REM NEXT i: REM  restore default l2 banks 790 REG 18,9: DRIVER 127,2,0: DRIVER 127,2,3: PROC removept3()  800 LAYER 2,1: LAYER OVER 0 810 PRINT "bye bye..." : STOP  820 STOP  830 ; code below seems to be doing the same as above ...  840 item=1 850 REPEAT  860 REM LAYER 1,1: LAYER CLEAR : LAYER OVER 5 : rem if you want to see what,s going on 870 REM PRINT "loading ";d$(i) 880 CD "plots": DIM p(7): PROC StripSpaces(d$(item)) TO a$:  LOAD a$ DATA p(): BANK iobnk PROC loadplot (a$)  : CD ".." 890 ri=1+ INT ( RND * (numitems-1)): CD "palettes": PROC StripSpaces(pal$(ri)) TO a$: BANK uibnk  PROC LoadL2Pal(l2palbnk,a$): CD ".." : REM random palette 900 IF minshow=maxshow: 910   delay=maxshow : ; fixed delay 920 ELSE : 930  delay= minshow+ INT ( RND *(maxshow-minshow)) 940 ENDIF  950 PROC wait(delay) 960 item+=1 970 IF item> numitems THEN item=1 980 k$= INKEY$  990 REPEAT UNTIL k$="q"1000 LAYER 1,1: LAYER CLEAR : LAYER OVER 51010 PRINT "bye bye..." : STOP 1020 ;1030 ; NEXT i this line is probably spurious1040 DEFPROC releasebanks()1050 LOCAL %i, %j,bnk1060 FOR %i=1 TO numitems1070 FOR %j=1 TO 51080   b=pcp(%i,%j):  IF bnk<>0 THEN BANK bnk CLEAR 1090 NEXT %j1100 NEXT %i1110 ENDPROC 1120 ;1130 DEFPROC precache(plot$,slot)1140 ; load a plot into into a set of banks and store the bank numbers in the pcp array1150 PRINT "preloading ";plot$1160 LOCAL %i,p:1170 CD "plots"1180 ; some error checking here would be nice1190 DIM p(7): PRINT plot$: LOAD plot$ DATA p()1200 BANK iobnk PROC loadscreen(plot$,p(1))1210 ; the screen data is loaded, so copy it to the cache1220 PROC getbanks(p(1)) TO b1,b2,b3,b4,b51230 pcp(slot,1)=b1: pcp(slot,2)=b2: pcp(slot,3)=b3: pcp(slot,4)=b4:pcp(slot,5)=b51240 ; copy the layer 2 banks to the cache1250 BANK 9 COPY TO b1 : BANK 10 COPY TO b2: BANK 11 COPY TO b31260 IF p(1)=2:1270 BANK 12 COPY TO b4: BANK 13 COPY TO b51280 ENDIF 1290 CD ".."1300 LAYER 1,1: LAYER OVER 5: INK 7: PRINT plot$;" cached"1310 ENDPROC 1320 ;1330 DEFPROC SetupPT3(tf$)1340 ; install the pt3 driver and start playing the file specified by tf$1350 IF tf$="" THEN ENDPROC : ; no music file specified1355 ;1360 ; PT3 driver by em00k1370 ; github.com/emok/zxnextos-pt3driver2/blob/main/pt3driverexample/pt3.txt1380 ; Many, many thanks to you !!!1385 ; 1390 ON ERROR GO TO %1410:1400 .install "pt3driver.drv"1410 ON ERROR 1420 LOAD "vortex.bin" BANK binbnk1430 LOAD tf$ BANK tunebnk1440 DRIVER 127,1,binbnk,tunebnk : REM init1450 REM cmd 127,2,x  0=stop, 1=init 2=play 3=mute1460 DRIVER 127,2,1 : REM should start the music1470 PRINT "music started"1480 ENDPROC 1490 DEFPROC removept3()1500 ; mute and stop the current .pt3 so that it can be 1510 ; reinitialised for the next song1520 DRIVER 127,2,3: PAUSE 25: DRIVER 127,2,01530 .uninstall "pt3driver.drv"1540 ENDPROC 1550 DEFPROC StripSpaces(p$)1560 REM remove spaces from a string1570 REM required because strings in arrays are padded with spaces to the maximum length1580 r$ =""1590 FOR ss=1 TO LEN (p$)1600 IF p$(ss)<>" " THEN r$ = r$ + p$(ss)1610 NEXT ss1620 ENDPROC =r$1630 ;1640 DEFPROC wait(delay)1650 ; delay is in seconds1660 POKE 65000,delay1670 b= USR 650011680 ENDPROC 1690 waited=01700 REPEAT 1710 PAUSE 501720 s$ = TIME $ (18 TO 19)1730 old$ = s$1740 REPEAT :1750  s$= TIME $ (18 TO 19)1760 REPEAT UNTIL s$<>old$1770 waited=waited+11780 REPEAT UNTIL waited=delay1790 ENDPROC 1800 ;1810 DEFPROC displayerror()1820 INK 11830 ERROR TO e,l,s,b1840 LAYER 1,1: LAYER OVER 5: INK 41850 PRINT ERROR $1860 PRINT "Code ";e1870 PRINT "Line: ";l1880 PRINT "Statement: ";s1890 PRINT "Bank: ";b1900 GO TO 99991910 ENDPROC 1920 ;1930 DEFPROC getbanks(plotsize)1940 ; allocate either 3 or 5 banks of memory, depending1950 ; on a whether a plot is 256x192 or 320x2561960 IF plotsize=21970 BANK NEW b5: BANK NEW b4:1980 ELSE :1990 b4=0: b5=02000 ENDIF 2010 BANK NEW b3: BANK NEW b2: BANK NEW b12020 ; bank new always allocates the highest numbered free bank first2030 ; but layer 2 expects its banks in low to high order2040 ; so we allocate the five(or 3) banks in reverse order2050 ENDPROC = b1,b2,b3,b4,b52060 ;2070 DEFPROC release banks(b,numbanks)2080 LOCAL i2090 FOR i=1 TO numbanks2100 PRINT "clearing bank ";b(i)2110 BANK b(i) CLEAR 2120 NEXT i2130 ENDPROC 2140 ;2150 DEFPROC displayplot(pn)2160 LAYER 1,0: LAYER 2,1: LAYER OVER 1: ;ensure layer 2 is active2170 IF pcp(pn,4)=0:2180 BANK uibnk PROC SetL2Res(1): ;256z192 plot2190 ELSE 2200 BANK uibnk PROC SetL2Res(2):2210 ENDIF 2220 REG 18,pcp(pn,1): ; set the start layer 2 memory to the first ban2230 ENDPROC 2240 ;2250 DEFPROC loadssh(sshfn$)2260 ; load a slideshow's setting and set global variables accordingly2270 LOCAL s$, i2280 DIM d$(maxitems,30)2290 LOAD sshfn$ DATA d$()2300 numitems= VAL (d$(1)) : plotrnd= VAL d$(2): palrnd= VAL d$(3)2310 numtunes= VAL (d$(4)): tuneints= VAL (d$(7)) 2320 minshow= VAL (d$(5)): maxshow= VAL (d$(6))2330 prepp=72340 PRINT numitems;" ";plotrnd;" ";palrnd;" " ;minshow;" ";maxshow 2350 FOR i=1 TO numitems2360  plot$(i) = d$(prepp+i) : pal$(i)= d$(prepp+numitems+i) 2370 NEXT i2380 FOR i=1  TO numitems : PRINT plot$(i) : NEXT i2390 FOR i=1  TO numitems : PRINT pal$(i) : NEXT i2400 FOR i=1 TO numtunes2410  tune$(i)= d$(prepp+2*numitems+i)2420 NEXT i2430 PRINT "Music: ";2440 IF numtunes=0:2450 PRINT "None"2460 ELSE 2470 FOR i=1 TO numtunes: PRINT tune$(i): NEXT i2480 ENDIF 2490 PAUSE 02500 ENDIF  2510 ENDPROC 2520 DEFPROC testmusic()2530 DIM t$(3,30)2540 t$(1)="she_stole_my_cat.pt3": t$(2)="tune.pt3": t$(3)="everthing_is_fine.pt3"2550 FOR i=1 TO 32560 PROC stripspaces(t$(i)) TO pt3$2570 CLS : PRINT "Tune: ";pt3$2580 PROC setuppt3(pt3$)2590 PRINT "playing for 1 minute"2600 PROC wait(60)2610 PROC removept3()2620 PRINT "next tune will start in a bit..."2630 PROC wait(2)2640 NEXT i2650 GO TO %25502660 ENDPROC 9998 SAVE "carousel.bas"